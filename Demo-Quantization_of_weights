{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "authorship_tag": "ABX9TyNnSBgUlqA7gbIkRo8r+WR0",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/vishal91-hub/Projects/blob/main/Demo-Quantization_of_weights\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6WwN1926e7sA",
        "outputId": "1ed79e57-9748-44f9-ff6d-104f2301b78f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: transformers in /usr/local/lib/python3.10/dist-packages (4.42.4)\n",
            "Requirement already satisfied: torch in /usr/local/lib/python3.10/dist-packages (2.3.1+cu121)\n",
            "Collecting bitsandbytes\n",
            "  Downloading bitsandbytes-0.43.3-py3-none-manylinux_2_24_x86_64.whl.metadata (3.5 kB)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from transformers) (3.15.4)\n",
            "Requirement already satisfied: huggingface-hub<1.0,>=0.23.2 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.23.5)\n",
            "Requirement already satisfied: numpy<2.0,>=1.17 in /usr/local/lib/python3.10/dist-packages (from transformers) (1.26.4)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from transformers) (24.1)\n",
            "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.10/dist-packages (from transformers) (6.0.2)\n",
            "Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.10/dist-packages (from transformers) (2024.5.15)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from transformers) (2.32.3)\n",
            "Requirement already satisfied: safetensors>=0.4.1 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.4.4)\n",
            "Requirement already satisfied: tokenizers<0.20,>=0.19 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.19.1)\n",
            "Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.10/dist-packages (from transformers) (4.66.5)\n",
            "Requirement already satisfied: typing-extensions>=4.8.0 in /usr/local/lib/python3.10/dist-packages (from torch) (4.12.2)\n",
            "Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch) (1.13.1)\n",
            "Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch) (3.3)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch) (3.1.4)\n",
            "Requirement already satisfied: fsspec in /usr/local/lib/python3.10/dist-packages (from torch) (2024.6.1)\n",
            "Collecting nvidia-cuda-nvrtc-cu12==12.1.105 (from torch)\n",
            "  Using cached nvidia_cuda_nvrtc_cu12-12.1.105-py3-none-manylinux1_x86_64.whl.metadata (1.5 kB)\n",
            "Collecting nvidia-cuda-runtime-cu12==12.1.105 (from torch)\n",
            "  Using cached nvidia_cuda_runtime_cu12-12.1.105-py3-none-manylinux1_x86_64.whl.metadata (1.5 kB)\n",
            "Collecting nvidia-cuda-cupti-cu12==12.1.105 (from torch)\n",
            "  Using cached nvidia_cuda_cupti_cu12-12.1.105-py3-none-manylinux1_x86_64.whl.metadata (1.6 kB)\n",
            "Collecting nvidia-cudnn-cu12==8.9.2.26 (from torch)\n",
            "  Using cached nvidia_cudnn_cu12-8.9.2.26-py3-none-manylinux1_x86_64.whl.metadata (1.6 kB)\n",
            "Collecting nvidia-cublas-cu12==12.1.3.1 (from torch)\n",
            "  Using cached nvidia_cublas_cu12-12.1.3.1-py3-none-manylinux1_x86_64.whl.metadata (1.5 kB)\n",
            "Collecting nvidia-cufft-cu12==11.0.2.54 (from torch)\n",
            "  Using cached nvidia_cufft_cu12-11.0.2.54-py3-none-manylinux1_x86_64.whl.metadata (1.5 kB)\n",
            "Collecting nvidia-curand-cu12==10.3.2.106 (from torch)\n",
            "  Using cached nvidia_curand_cu12-10.3.2.106-py3-none-manylinux1_x86_64.whl.metadata (1.5 kB)\n",
            "Collecting nvidia-cusolver-cu12==11.4.5.107 (from torch)\n",
            "  Using cached nvidia_cusolver_cu12-11.4.5.107-py3-none-manylinux1_x86_64.whl.metadata (1.6 kB)\n",
            "Collecting nvidia-cusparse-cu12==12.1.0.106 (from torch)\n",
            "  Using cached nvidia_cusparse_cu12-12.1.0.106-py3-none-manylinux1_x86_64.whl.metadata (1.6 kB)\n",
            "Collecting nvidia-nccl-cu12==2.20.5 (from torch)\n",
            "  Using cached nvidia_nccl_cu12-2.20.5-py3-none-manylinux2014_x86_64.whl.metadata (1.8 kB)\n",
            "Collecting nvidia-nvtx-cu12==12.1.105 (from torch)\n",
            "  Using cached nvidia_nvtx_cu12-12.1.105-py3-none-manylinux1_x86_64.whl.metadata (1.7 kB)\n",
            "Requirement already satisfied: triton==2.3.1 in /usr/local/lib/python3.10/dist-packages (from torch) (2.3.1)\n",
            "Collecting nvidia-nvjitlink-cu12 (from nvidia-cusolver-cu12==11.4.5.107->torch)\n",
            "  Using cached nvidia_nvjitlink_cu12-12.6.20-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch) (2.1.5)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (3.7)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (2.0.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (2024.7.4)\n",
            "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from sympy->torch) (1.3.0)\n",
            "Using cached nvidia_cublas_cu12-12.1.3.1-py3-none-manylinux1_x86_64.whl (410.6 MB)\n",
            "Using cached nvidia_cuda_cupti_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (14.1 MB)\n",
            "Using cached nvidia_cuda_nvrtc_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (23.7 MB)\n",
            "Using cached nvidia_cuda_runtime_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (823 kB)\n",
            "Using cached nvidia_cudnn_cu12-8.9.2.26-py3-none-manylinux1_x86_64.whl (731.7 MB)\n",
            "Using cached nvidia_cufft_cu12-11.0.2.54-py3-none-manylinux1_x86_64.whl (121.6 MB)\n",
            "Using cached nvidia_curand_cu12-10.3.2.106-py3-none-manylinux1_x86_64.whl (56.5 MB)\n",
            "Using cached nvidia_cusolver_cu12-11.4.5.107-py3-none-manylinux1_x86_64.whl (124.2 MB)\n",
            "Using cached nvidia_cusparse_cu12-12.1.0.106-py3-none-manylinux1_x86_64.whl (196.0 MB)\n",
            "Using cached nvidia_nccl_cu12-2.20.5-py3-none-manylinux2014_x86_64.whl (176.2 MB)\n",
            "Using cached nvidia_nvtx_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (99 kB)\n",
            "Downloading bitsandbytes-0.43.3-py3-none-manylinux_2_24_x86_64.whl (137.5 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m137.5/137.5 MB\u001b[0m \u001b[31m7.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hUsing cached nvidia_nvjitlink_cu12-12.6.20-py3-none-manylinux2014_x86_64.whl (19.7 MB)\n",
            "Installing collected packages: nvidia-nvtx-cu12, nvidia-nvjitlink-cu12, nvidia-nccl-cu12, nvidia-curand-cu12, nvidia-cufft-cu12, nvidia-cuda-runtime-cu12, nvidia-cuda-nvrtc-cu12, nvidia-cuda-cupti-cu12, nvidia-cublas-cu12, nvidia-cusparse-cu12, nvidia-cudnn-cu12, nvidia-cusolver-cu12, bitsandbytes\n",
            "Successfully installed bitsandbytes-0.43.3 nvidia-cublas-cu12-12.1.3.1 nvidia-cuda-cupti-cu12-12.1.105 nvidia-cuda-nvrtc-cu12-12.1.105 nvidia-cuda-runtime-cu12-12.1.105 nvidia-cudnn-cu12-8.9.2.26 nvidia-cufft-cu12-11.0.2.54 nvidia-curand-cu12-10.3.2.106 nvidia-cusolver-cu12-11.4.5.107 nvidia-cusparse-cu12-12.1.0.106 nvidia-nccl-cu12-2.20.5 nvidia-nvjitlink-cu12-12.6.20 nvidia-nvtx-cu12-12.1.105\n"
          ]
        }
      ],
      "source": [
        "pip install transformers torch bitsandbytes\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Bpl0ljJqtXms"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "from transformers import AutoModelForCausalLM, AutoTokenizer\n",
        "import matplotlib.pyplot as plt\n",
        "import bitsandbytes as bnb\n",
        "\n",
        "# Load the GPT-2 model and tokenizer\n",
        "model_name = \"gpt2\"\n",
        "model = AutoModelForCausalLM.from_pretrained(model_name)\n",
        "tokenizer = AutoTokenizer.from_pretrained(model_name)\n",
        "\n",
        "# Tokenize input\n",
        "inputs = tokenizer(\"This is a test input.\", return_tensors=\"pt\")\n",
        "input_ids = inputs['input_ids'].to(device)\n",
        "\n",
        "# Function to quantize weights using absmax and zero-point\n",
        "def quantize_weights_absmax(weight_tensor):\n",
        "    absmax = weight_tensor.abs().max()\n",
        "    scale = absmax / 127  # INT8 range: -128 to 127\n",
        "    zero_point = 0  # Assuming symmetric quantization\n",
        "    quantized_weights = torch.round(weight_tensor / scale).to(torch.int8)\n",
        "    return quantized_weights, scale, zero_point\n",
        "\n",
        "# Function to dequantize weights\n",
        "def dequantize_weights(quantized_weights, scale, zero_point):\n",
        "    return (quantized_weights.float() - zero_point) * scale\n",
        "\n",
        "# Plotting function for histograms\n",
        "def plot_histograms(original_weights, quantized_weights, dequantized_weights, layer_name):\n",
        "    plt.figure(figsize=(15, 5))\n",
        "\n",
        "    # Original weights histogram\n",
        "    plt.subplot(1, 3, 1)\n",
        "    plt.hist(original_weights.cpu().numpy().flatten(), bins=50, color='blue', alpha=0.7)\n",
        "    plt.title(f'Original Weights - {layer_name}')\n",
        "    plt.xlabel('Weight Value')\n",
        "    plt.ylabel('Frequency')\n",
        "\n",
        "    # Quantized weights histogram\n",
        "    plt.subplot(1, 3, 2)\n",
        "    plt.hist(quantized_weights.cpu().numpy().flatten(), bins=50, color='green', alpha=0.7)\n",
        "    plt.title(f'Quantized Weights - {layer_name}')\n",
        "    plt.xlabel('Weight Value')\n",
        "    plt.ylabel('Frequency')\n",
        "\n",
        "    # Dequantized weights histogram\n",
        "    plt.subplot(1, 3, 3)\n",
        "    plt.hist(dequantized_weights.cpu().numpy().flatten(), bins=50, color='red', alpha=0.7)\n",
        "    plt.title(f'Dequantized Weights - {layer_name}')\n",
        "    plt.xlabel('Weight Value')\n",
        "    plt.ylabel('Frequency')\n",
        "\n",
        "    plt.show()\n",
        "\n",
        "# Quantize weights and plot histograms for the first layer only\n",
        "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "model.to(device)\n",
        "inputs = {k: v.to(device) for k, v in inputs.items()}\n",
        "\n",
        "for i, (name, param) in enumerate(model.named_parameters()):\n",
        "    if i == 0:  # Only process the first layer\n",
        "        original_weights = param.data.clone()\n",
        "        quantized_weights, scale, zero_point = quantize_weights_absmax(param.data)\n",
        "        dequantized_weights = dequantize_weights(quantized_weights, scale, zero_point)\n",
        "        param.data.copy_(dequantized_weights)\n",
        "\n",
        "        # Print summary of the original weights\n",
        "        print(f\"Original weights for layer '{name}':\")\n",
        "        print(f\"Mean: {original_weights.mean().item():.4f}\")\n",
        "        print(f\"Std Dev: {original_weights.std().item():.4f}\")\n",
        "        print(f\"Min: {original_weights.min().item():.4f}\")\n",
        "        print(f\"Max: {original_weights.max().item():.4f}\")\n",
        "\n",
        "        # Print summary of the quantized weights\n",
        "        print(f\"Quantized weights for layer '{name}':\")\n",
        "        print(f\"Mean: {quantized_weights.float().mean().item():.4f}\")\n",
        "        print(f\"Std Dev: {quantized_weights.float().std().item():.4f}\")\n",
        "        print(f\"Min: {quantized_weights.float().min().item():.4f}\")\n",
        "        print(f\"Max: {quantized_weights.float().max().item():.4f}\")\n",
        "\n",
        "        # Print summary of the dequantized weights\n",
        "        print(f\"Dequantized weights for layer '{name}':\")\n",
        "        print(f\"Mean: {dequantized_weights.mean().item():.4f}\")\n",
        "        print(f\"Std Dev: {dequantized_weights.std().item():.4f}\")\n",
        "        print(f\"Min: {dequantized_weights.min().item():.4f}\")\n",
        "        print(f\"Max: {dequantized_weights.max().item():.4f}\")\n",
        "\n",
        "        # Plot histograms of the original and quantized weights\n",
        "        plot_histograms(original_weights, quantized_weights, dequantized_weights, name)\n",
        "        break  # Exit loop after processing the first layer\n",
        "\n",
        "# Forward pass after quantization\n",
        "with torch.no_grad():\n",
        "    quantized_output = model(**inputs).logits\n",
        "print(\"Quantized Output:\", quantized_output)\n",
        "\n",
        "# Use bitsandbytes optimizer for GPU\n",
        "optimizer = bnb.optim.AdamW8bit(model.parameters(), lr=1e-5)\n",
        "\n",
        "# Labels should be same as input_ids for GPT-2 (for language modeling)\n",
        "labels = input_ids\n",
        "\n",
        "# Compute loss and backpropagation\n",
        "loss_fn = torch.nn.CrossEntropyLoss()\n",
        "outputs = model(**inputs).logits\n",
        "# Reshape labels to match the model's output shape\n",
        "loss = loss_fn(outputs.view(-1, outputs.size(-1)), labels.view(-1))\n",
        "loss.backward()\n",
        "optimizer.step()\n",
        "\n",
        "print(\"Optimization complete with quantized weights.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 965
        },
        "id": "mGmmm8QxtaBB",
        "outputId": "38c9fd98-995d-46f1-da07-edd84be5924c"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Original weights for layer 'transformer.wte.weight':\n",
            "Mean: 0.0004\n",
            "Std Dev: 0.1437\n",
            "Min: -1.2698\n",
            "Max: 1.7852\n",
            "Quantized weights for layer 'transformer.wte.weight':\n",
            "Mean: 0.0272\n",
            "Std Dev: 10.2276\n",
            "Min: -90.0000\n",
            "Max: 127.0000\n",
            "Dequantized weights for layer 'transformer.wte.weight':\n",
            "Mean: 0.0004\n",
            "Std Dev: 0.1438\n",
            "Min: -1.2651\n",
            "Max: 1.7852\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x500 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Quantized Output: tensor([[[ -36.1472,  -35.4791,  -39.3312,  ...,  -42.7822,  -41.8431,\n",
            "           -36.3844],\n",
            "         [-109.1575, -109.4628, -114.6646,  ..., -117.9574, -116.7183,\n",
            "          -112.5357],\n",
            "         [-113.2721, -112.9644, -115.9066,  ..., -122.2549, -117.7368,\n",
            "          -114.0923],\n",
            "         [ -87.2585,  -89.5516,  -95.3000,  ..., -102.4005,  -99.3006,\n",
            "           -92.4297],\n",
            "         [ -95.8568,  -98.0578, -102.1075,  ..., -109.3648, -107.5178,\n",
            "          -100.2059],\n",
            "         [-130.2088, -131.4137, -129.9591,  ..., -137.3340, -137.6169,\n",
            "          -124.0457]]], device='cuda:0')\n",
            "Optimization complete with quantized weights.\n"
          ]
        }
      ]
    }
  ]
}